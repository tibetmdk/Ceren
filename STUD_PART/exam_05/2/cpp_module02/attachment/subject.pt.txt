Nome da tarefa  : cpp_module02
Arquivos esperados   : Warlock.cpp Warlock.hpp
                       ASpell.hpp ASpell.cpp
                       ATarget.hpp ATarget.cpp
                       Fwoosh.hpp Fwoosh.cpp
                       Dummy.hpp Dummy.cpp
                       Fireball.hpp Fireball.cpp
                       Polymorph.hpp Polymorph.cpp
                       BrickWall.hpp BrickWall.cpp
                       SpellBook.hpp SpellBook.cpp
                       TargetGenerator.hpp TargetGenerator.cpp
--------------------------------------------------------------------------------

Nas classes Warlock, SpellBook e TargetGenerator, a instrução switch é PROIBIDA 
e seu uso resultará em -42.

Crie os seguintes dois feitiços, no mesmo modelo que Fwoosh:

* Fireball (Nome: "Fireball", Efeitos: "burnt to a crisp")
* Polymorph (Nome: "Polymorph", Efeitos: "turned into a critter")

Além disso, para que ele não tenha apenas um boneco para atacar, vamos criar um 
novo alvo para ele, que será o BrickWall (Tipo: "Inconspicuous Red-brick Wall").

Agora, crie uma classe SpellBook, na forma canônica, que não pode ser copiada ou 
instanciada por cópia. Ela terá as seguintes funções:

* void learnSpell(ASpell*), que COPIA um feitiço no livro
* void forgetSpell(string const &), que exclui um feitiço do livro, exceto se ele
não estiver lá
* ASpell* createSpell(string const &), que recebe uma string correspondente ao nome 
de um feitiço, cria-o e o retorna.

Modifique o Warlock, agora, faça com que ele tenha um livro de feitiços que será criado 
com ele e destruído com ele. Além disso, faça com que suas funções learnSpell e forgetSpell
chamem as do livro de feitiços.

A função launchSpell terá que usar o SpellBook para criar o feitiço que está tentando 
lançar.

Crie uma classe TargetGenerator, na forma canônica, e como antes, não copiável.

Ela terá as seguintes funções:

* void learnTargetType(ATarget*), ensina um alvo ao gerador
* void forgetTargetType(string const &), que faz o gerador esquecer um tipo de alvo se 
ele for conhecido
* ATarget* createTarget(string const &), que cria um alvo do tipo especificado

Ufa, está feito. Agora aqui está um teste principal. Não é muito completo, então 
certifique-se de usar o seu próprio também.

int main()
{
  Warlock richard("Richard", "foo");
  richard.setTitle("Hello, I'm Richard the Warlock!");
  BrickWall model1;

  Polymorph* polymorph = new Polymorph();
  TargetGenerator tarGen;

  tarGen.learnTargetType(&model1);
  richard.learnSpell(polymorph);

  Fireball* fireball = new Fireball();

  richard.learnSpell(fireball);

  ATarget* wall = tarGen.createTarget("Inconspicuous Red-brick Wall");

  richard.introduce();
  richard.launchSpell("Polymorph", *wall);
  richard.launchSpell("Fireball", *wall);
}

~$ ./a.out | cat -e
Richard: This looks like another boring day.$
Richard: I am Richard, Hello, I'm Richard the Warlock!!$
Inconspicuous Red-brick Wall has been turned into a critter!$
Inconspicuous Red-brick Wall has been burnt to a crisp!$
Richard: My job here is done!$
~$
