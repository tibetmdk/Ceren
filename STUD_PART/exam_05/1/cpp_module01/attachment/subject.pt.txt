
Nome da pasta : cpp_module01
Arquivos esperados   : Warlock.cpp Warlock.hpp
                       ASpell.hpp ASpell.cpp
                       ATarget.hpp ATarget.cpp
                       Fwoosh.hpp Fwoosh.cpp
                       Dummy.hpp Dummy.cpp
--------------------------------------------------------------------------------

Na classe Warlock, a instrução switch é PROIBIDA e seu uso resultará em -42.

Crie uma classe abstrata chamada ASpell, na forma de Coplien, que possui os 
seguintes atributos protegidos:

* name (string)
* effects (string)

Ambos terão getters (getName e getEffects) que retornam strings.

Adicione também um método puro clone que retorna um ponteiro para ASpell.

Todas essas funções podem ser chamadas em um objeto constante.

ASpell tem um construtor que recebe seu nome e seus efeitos, nessa ordem.

Agora você criará uma classe abstrata ATarget, na forma de Coplien. Ela tem um 
atributo type, que é uma string, e seu getter associado, getType, que retorna 
uma referência para uma string constante.

Da mesma forma que ASpell, ela tem um método puro clone().

Todas essas funções podem ser chamadas em um objeto constante.

Ela tem um construtor que recebe seu tipo.

Agora, adicione à sua ATarget uma função getHitBySpell que recebe uma referência 
para uma ASpell constante.

Ela exibirá:

<TYPE> has been <EFFECTS>!

<TYPE> é o tipo de ATarget, e <EFFECTS> é o retorno da função getEffects de ASpell.

Finalmente, adicione à sua classe ASpell uma função launch que recebe uma referência 
para uma ATarget constante.

Esta simplesmente chamará o getHitBySpell do objeto passado, passando a instância 
atual como parâmetro.

Quando tudo isso estiver feito, crie uma implementação de ASpell chamada Fwoosh. 
Seu construtor padrão definirá o nome como "Fwoosh" e os efeitos como "fwooshed". 
Você, é claro, implementará o método clone(). No caso de Fwoosh, ele retornará um 
ponteiro para um novo objeto Fwoosh.

Da mesma forma, crie um ATarget concreto chamado Dummy, cujo tipo é "Target Practice Dummy". 
Você também deve implementar seu método clone().

Adicione ao Warlock as seguintes funções membro:

* learnSpell, que recebe um ponteiro para ASpell, que faz o Warlock aprender um feitiço
* forgetSpell, que recebe uma string correspondente ao nome de um feitiço, e faz o Warlock 
esquecê-lo. Se não for um feitiço conhecido, não faz nada.
* launchSpell, que recebe uma string (um nome de feitiço) e uma referência para ATarget, que
 lança o feitiço no alvo selecionado. Se não for um feitiço conhecido, não faz nada.

Você precisará de um novo atributo para armazenar os feitiços que seu Warlock conhece. 
Vários tipos se encaixam, cabe a você escolher o melhor.

Abaixo está um possível teste principal e sua saída esperada:

int main()
{
  Warlock richard("Richard", "the Titled");

  Dummy bob;
  Fwoosh* fwoosh = new Fwoosh();

  richard.learnSpell(fwoosh);

  richard.introduce();
  richard.launchSpell("Fwoosh", bob);

  richard.forgetSpell("Fwoosh");
  richard.launchSpell("Fwoosh", bob);
}

~$ ./a.out | cat -e
Richard: This looks like another boring day.$
Richard: I am Richard, the Titled!$
Target Practice Dummy has been fwooshed!$
Richard: My job here is done!$
